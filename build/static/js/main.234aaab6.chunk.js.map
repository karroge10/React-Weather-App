{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","style","paddingBottom","city","weatherIcon","temp_celcius","min","max","minmaxTemp","temp_min","temp_max","description","Form","paddingTop","error","role","onSubmit","loadweather","type","id","name","autoComplete","placeholder","for","App","getWeather","event","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celcius","calCelcius","main","temp","weather","get_WeatherIcon","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wSAkCeA,MAhCC,SAACC,GACb,OACI,yBAAKC,UAAU,YAAYC,MAAO,CAACC,cAAe,KAC9C,yBAAKF,UAAU,cACX,4BACKD,EAAMI,MAEX,wBAAIH,UAAU,QACV,uBAAGA,UAAS,aAAQD,EAAMK,YAAd,iBAEfL,EAAMM,aAAgB,wBAAIL,UAAU,OAAOD,EAAMM,aAA3B,QAAsD,KAW7F,SAAoBC,EAAIC,GACpB,GAAGD,GAAOC,EACN,OACI,4BACI,0BAAMP,UAAU,QAAhB,QAA6BM,EAA7B,QACA,0BAAMN,UAAU,QAAhB,QAA6BO,EAA7B,SAbCC,CAAWT,EAAMU,SAAUV,EAAMW,UAElC,wBAAIV,UAAU,QAAQD,EAAMY,gB,MCe7BC,MA7BF,SAAAb,GACT,OACI,yBAAKC,UAAU,YAAYC,MAAO,CAACY,WAAY,KAC3C,6BAAMd,EAAMe,MAsBhB,yBAAKd,UAAU,0BAA0Be,KAAK,SAA9C,iCAtBkC,MAC9B,0BAAMC,SAAUjB,EAAMkB,aACtB,yBAAKjB,UAAU,yCACX,yBAAKA,UAAU,QACX,2BAAOkB,KAAK,OAAOlB,UAAU,eAAemB,GAAG,OAAOC,KAAK,OAAOC,aAAa,MAAMC,YAAY,SACjG,2BAAOC,IAAI,UAEf,yBAAKvB,UAAU,QACX,2BAAOkB,KAAK,OAAOlB,UAAU,eAAemB,GAAG,UAAUC,KAAK,UAAUC,aAAa,MAAMC,YAAY,YACvG,2BAAOC,IAAI,aAEf,yBAAKvB,UAAU,OACX,4BAAQA,UAAU,gBAAlB,oBCmGLwB,E,kDAxGb,aAAc,IAAD,8BACX,gBAmDFC,WApDa,uCAoDA,WAAMC,GAAN,qBAAAC,EAAA,yDAEXD,EAAME,iBAEAzB,EAAOuB,EAAMG,OAAOC,SAAS3B,KAAK4B,MAClCC,EAAUN,EAAMG,OAAOC,SAASE,QAAQD,OAE3C5B,IAAQ6B,EAPA,iCAQcC,MAAM,qDAAD,OAAsD9B,EAAtD,YAA8D6B,EAA9D,kBAhElB,qCAwDD,cAQHE,EARG,gBAUcA,EAASC,OAVvB,OAUHC,EAVG,OAYTC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZpC,KAAK,GAAD,OAAKiC,EAAShB,KAAd,YAAsBgB,EAASI,IAAIR,SACvCS,QAAS,EAAKC,WAAWN,EAASO,KAAKC,MACvCnC,SAAU,EAAKiC,WAAWN,EAASO,KAAKlC,UACxCC,SAAU,EAAKgC,WAAWN,EAASO,KAAKjC,UACxCC,YAAayB,EAASS,QAAQ,GAAGlC,YACjCG,OAAO,IAGT,EAAKgC,gBAAgB,EAAK1C,YAAagC,EAASS,QAAQ,GAAG1B,IAvBlD,wBAyBT,EAAKoB,SAAS,CAACzB,OAAO,IAzBb,4CApDA,sDAEX,EAAKiC,MAAQ,CACX5C,UAAM6C,EACNhB,aAASgB,EACTC,UAAMD,EACNL,UAAMK,EACNP,aAASO,EACTvC,cAAUuC,EACVtC,cAAUsC,EACVrC,YAAa,GACbG,OAAO,GAGT,EAAKV,YAAc,CACjB8C,aAAc,kBACdC,QAAS,cACTC,KAAM,UACNC,KAAM,UACNC,WAAY,SACZC,MAAO,eACPC,OAAQ,aArBC,E,8CA0Bb,SAAWZ,GAET,OADWa,KAAKC,MAAMd,EAAO,U,6BAI/B,SAAgBe,EAAOC,GACrB,QAAQ,GACN,KAAKA,GAAW,KAAOA,GAAW,IAAKC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAY8C,eAC7E,MACA,KAAKU,GAAW,KAAOA,GAAW,IAAKC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAY+C,UAC7E,MACA,KAAKS,GAAW,KAAOA,GAAW,IAAKC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAYgD,OAC7E,MACA,KAAKQ,GAAW,KAAOA,GAAW,IAAKC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAYiD,OAC7E,MACA,KAAKO,GAAW,KAAOA,GAAW,IAAKC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAYkD,aAC7E,MACA,KAAiB,MAAZM,EAAiBC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAYmD,QAC5D,MACA,KAAKK,GAAW,KAAOA,GAAW,IAAKC,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAYoD,SAC7E,MACA,QAASK,KAAKtB,SAAS,CAACU,KAAMY,KAAKzD,YAAYoD,Y,oBAoCnD,WACE,OACE,yBAAKxD,UAAU,OACf,kBAAC,EAAD,CACEiB,YAAa4C,KAAKpC,WAClBX,MAAO+C,KAAKd,MAAMjC,QAEpB,kBAAC,EAAD,CACEX,KAAM0D,KAAKd,MAAM5C,KACjB6B,QAAS6B,KAAKd,MAAMf,QACpB3B,aAAcwD,KAAKd,MAAMN,QACzBhC,SAAUoD,KAAKd,MAAMtC,SACrBC,SAAUmD,KAAKd,MAAMrC,SACrBC,YAAakD,KAAKd,MAAMpC,YACxBP,YAAayD,KAAKd,MAAME,Y,GAlGda,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlE,GACLuB,QAAQvB,MAAMA,EAAMmE,a","file":"static/js/main.234aaab6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n    return(\n        <div className=\"container\" style={{paddingBottom: 30}}>\n            <div className=\"cards pt-4\">\n                <h1>\n                    {props.city}\n                </h1>\n                <h1 className=\"py-4\">\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h1>\n                {props.temp_celcius ? (<h1 className=\"py2\">{props.temp_celcius}&deg;</h1>) : null}\n            \n                {/* show max and min temperature */}\n                {minmaxTemp(props.temp_min, props.temp_max)}\n            \n                <h4 className=\"py-3\">{props.description}</h4>\n            </div>\n        </div>\n    );\n};\n\nfunction minmaxTemp(min,max){\n    if(min && max){\n        return(\n            <h3>\n                <span className=\"px-4\">Min: {min}&deg;</span>\n                <span className=\"px-4\">Max: {max}&deg;</span>\n            </h3>\n        )\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport './form.style.css'\n\nconst Form = props => {\n    return(\n        <div className=\"container\" style={{paddingTop: 30}}>\n            <div>{props.error ? error() : null}</div>\n            <form onSubmit={props.loadweather}>\n            <div className=\"d-flex justify-content-center rowform\">\n                <div className=\"mx-3\">\n                    <input type=\"text\" className=\"form-control\" id=\"city\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\n                    <label for=\"city\"></label>\n                </div>\n                <div className=\"mx-3\">\n                    <input type=\"text\" className=\"form-control\" id=\"country\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\n                    <label for=\"country\"></label>\n                </div>\n                <div className=\"mx3\">\n                    <button className=\"btn btn-dark\">Get Weather</button>\n                </div>\n            </div>\n            </form>\n        </div>\n    );\n}\n\nfunction error(){\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">Please Enter City and Country</div>\n    )\n}\n\nexport default Form;","import React from \"react\";\n\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.component\"\n\nconst API_key = \"64bcacbbd7ced9a4d37d2eb973593989\";\n\n// Main App Component\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celcius: undefined,\n      temp_min: undefined,\n      temp_max: undefined,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sprinkle\",\n      Rain: \"wi-rain\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-cloudy\"\n    }\n  }\n\n  //Convert Fahrenheit to Celcius\n  calCelcius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell\n  }\n  //Choose the right weather Icon depending on the weather\n  get_WeatherIcon(icons, rangeId){\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232: this.setState({icon: this.weatherIcon.Thunderstorm}); \n      break;\n      case rangeId >= 300 && rangeId <= 321: this.setState({icon: this.weatherIcon.Drizzle}); \n      break;\n      case rangeId >= 500 && rangeId <= 531: this.setState({icon: this.weatherIcon.Rain}); \n      break;\n      case rangeId >= 600 && rangeId <= 622: this.setState({icon: this.weatherIcon.Snow}); \n      break;\n      case rangeId >= 700 && rangeId <= 781: this.setState({icon: this.weatherIcon.Atmosphere}); \n      break;\n      case rangeId === 800: this.setState({icon: this.weatherIcon.Clear}); \n      break;\n      case rangeId >= 801 && rangeId <= 804: this.setState({icon: this.weatherIcon.Clouds}); \n      break;\n      default: this.setState({icon: this.weatherIcon.Clouds}); \n    }\n  }\n\n  //Get Weather from the API \n  getWeather = async(event) => {\n\n    event.preventDefault();\n\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    if(city && country){\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\n\n      const response = await api_call.json();\n      \n      console.log(response);\n  \n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n        celcius: this.calCelcius(response.main.temp),\n        temp_min: this.calCelcius(response.main.temp_min),\n        temp_max: this.calCelcius(response.main.temp_max),\n        description: response.weather[0].description,\n        error: false\n      });\n  \n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    } else{\n      this.setState({error: true})\n    }\n\n  };\n\n  // Render the elements on screen using the JSX Weather component from weather.component.jsx\n  render(){\n    return(\n      <div className=\"App\">\n      <Form \n        loadweather={this.getWeather}\n        error={this.state.error}\n      />\n      <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celcius={this.state.celcius} \n        temp_min={this.state.temp_min} \n        temp_max={this.state.temp_max}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n      />\n    </div>\n    )\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}